package com.strategy.intecom.vtc.vgift;

import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.strategy.intecom.vtc.vgift.common.AppBase;
import com.strategy.intecom.vtc.vgift.common.VtcString;
import com.strategy.intecom.vtc.vgift.custom.ViewPageCus;
import com.strategy.intecom.vtc.vgift.service.RegistrationService;
import com.strategy.intecom.vtc.vgift.utils.Const;
import com.strategy.intecom.vtc.vgift.view.FMGameList;
import com.strategy.intecom.vtc.vgift.view.FMGiftcode;
import com.strategy.intecom.vtc.vgift.view.FMNews;
import com.strategy.intecom.vtc.vgift.view.FMProfile;
import com.strategy.intecom.vtc.vgift.view.FMSpinning;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    public Bundle bundle = null;

    private int REQUEST_CAMERA = 0;
    private int SELECT_FILE = 1;
    private Dialog dlEmergency;
    private ViewPageCus viewPager;
    private TextView tvTitileView;
    private LinearLayout loutProfile;
    private LinearLayout loutGiftcode;
    private LinearLayout loutNews;
    private LinearLayout loutGameList;
    private LinearLayout loutSpinning;
    private int loutFlag = -1;
    public static TextView tvNoti;
    private static Context mContext;
    private BroadcastReceiver mReceiverNoti;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        this.mContext = this;
        // get bundle
        if (bundle == null && getIntent() != null) {
            bundle = getIntent().getExtras();
        }
        if (bundle != null) {
            if (bundle.containsKey("type")) {
                int type = bundle.getInt("type");
                String message = bundle.getString("message");
                AppBase.showLog("type:" + type);
                AppBase.showLog("message:" + message);
            }
        }
        initController();
    }

    private void initController() {
        AppBase.setActivity(this);

        //change header color
        AppBase.initToolsHeaderBar(this, true);


        //AppBase.callNewFragment(Const.UI_HOME, null, false);

//        AppBase.callNewFragmentCallBack(Const.UI_HOME, null, true, new Callback() {
//            @Override
//            public <T> void onHandlerCallBack(int key, T... t) {
//                AppBase.showLog(t[0].toString());
//            }
//        });


//        AppBase.callNewFragment(Const.UI_PROFILE, null, true);
//        AppBase.callNewFragment(Const.UI_EMAIL, null, true);

//  AppBase.callNewFragmentCallBack(Const.UI_EMAIL, null, true, new Callback() {
//            @Override
//            public <T> void onHandlerCallBack(int key, T... t) {
//                AppBase.showLog("---------Test Callback Email: " + t[0]);
//            }
//        });

//        AppBase.callNewFragment(Const.UI_GAMELIST, null, true);

        //startActivity(new Intent(this, FMHome.class));

        intGetDeviceToken(this);

        dlEmergency = new Dialog(this);
        dlEmergency.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dlEmergency.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        dlEmergency.setContentView(R.layout.dl_emergency);
        dlEmergency.setCancelable(false);
        //dlEmergency.show();

        Button btnLogin = (Button) dlEmergency.findViewById(R.id.btn_Login);
        btnLogin.setOnClickListener(this);

        Button btnRegister = (Button) dlEmergency.findViewById(R.id.btn_Register);
        btnRegister.setOnClickListener(this);

        ImageView imgExit = (ImageView) dlEmergency.findViewById(R.id.img_Exit);
        imgExit.setOnClickListener(this);

        viewPager = (ViewPageCus) findViewById(R.id.viewpage_Content);
        viewPager.setAdapter(new MyPagerAdapter(getSupportFragmentManager()));
        viewPager.setPagingEnabled(false);

        loutGiftcode = (LinearLayout) findViewById(R.id.lout_Action_Giftcode);
        loutGiftcode.setOnClickListener(this);

        loutProfile = (LinearLayout) findViewById(R.id.lout_Action_Profile);
        loutProfile.setOnClickListener(this);

        loutSpinning = (LinearLayout) findViewById(R.id.lout_Action_Spinning);
        loutSpinning.setOnClickListener(this);

        loutNews = (LinearLayout) findViewById(R.id.lout_Action_News);
        loutNews.setOnClickListener(this);

        loutGameList = (LinearLayout) findViewById(R.id.lout_Action_Game);
        loutGameList.setOnClickListener(this);
        loutGameList.setBackgroundColor(ContextCompat.getColor(this, R.color.color_Blue_Dark));

        ImageView imgNoti = (ImageView) findViewById(R.id.img_Notification);
        imgNoti.setOnClickListener(this);

        tvTitileView = (TextView) findViewById(R.id.tv_Titile_View);
        tvNoti = (TextView) findViewById(R.id.tv_noti);

        int count = AppBase.preferenceUtil(this).getValueInt(VtcString.KEY_NOTIFICATION);
        if (count > 0) {
            tvNoti.setVisibility(View.VISIBLE);
            tvNoti.setText(String.valueOf(count));
        } else {
            tvNoti.setVisibility(View.GONE);
        }

        IntentFilter intentFilter = new IntentFilter(
                "intecom.vtc.vgift.noti");

        mReceiverNoti = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                AppBase.showLog("==============Noti==================");
                MainActivity.this.runOnUiThread(new Runnable() {
                                                    public void run() {
                                                        if (tvNoti != null) {
                                                            tvNoti.setText(String.valueOf(AppBase.preferenceUtil(mContext).getValueInt(VtcString.KEY_NOTIFICATION)));
                                                        }
                                                    }
                                                }
                );

            }
        };
        this.registerReceiver(mReceiverNoti, intentFilter);
    }

    /**
     * Call get device token method
     *
     * @param mContext context of class
     */
    private static void intGetDeviceToken(Context mContext) {
        // start get service get device id
        Intent intentService = new Intent(mContext, RegistrationService.class);

        if (!AppBase.checkPlayServices(mContext)) {
            mContext.stopService(intentService);
        }
        mContext.startService(intentService);
        // end get service get device Token
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        switch (id) {
            case R.id.btn_Login:
                Toast.makeText(this, "btnLogin", Toast.LENGTH_SHORT).show();
                break;
            case R.id.btn_Register:
                Toast.makeText(this, "btnRegister", Toast.LENGTH_SHORT).show();
                break;
            case R.id.img_Exit:
                dlEmergency.dismiss();
                break;
            case R.id.img_Notification:
                AppBase.callNewFragment(Const.UI_NOTI, null, true);
                break;
            case R.id.lout_Action_Giftcode:
                viewPager.setCurrentItem(Const.INDEX_ACTION_GIFT_CODE);
                tvTitileView.setText(getResources().getString(R.string.title_View_GIFTCODE));
                changeBGButton(loutGiftcode, Const.INDEX_ACTION_GIFT_CODE);
                break;
            case R.id.lout_Action_Profile:
                viewPager.setCurrentItem(Const.INDEX_ACTION_PROFILE);
                tvTitileView.setText(getResources().getString(R.string.title_View_PROFILE));
                changeBGButton(loutProfile, Const.INDEX_ACTION_PROFILE);
                break;
            case R.id.lout_Action_Spinning:
                viewPager.setCurrentItem(Const.INDEX_ACTION_SPINNING);
                tvTitileView.setText(getResources().getString(R.string.title_View_SPINNING));
                changeBGButton(loutSpinning, Const.INDEX_ACTION_SPINNING);
                break;
            case R.id.lout_Action_News:
                viewPager.setCurrentItem(Const.INDEX_ACTION_NEWS);
                tvTitileView.setText(getResources().getString(R.string.title_View_NEWS));
                changeBGButton(loutNews, Const.INDEX_ACTION_NEWS);
                break;
            case R.id.lout_Action_Game:
                viewPager.setCurrentItem(Const.INDEX_ACTION_GAME_LIST);
                tvTitileView.setText(getResources().getString(R.string.title_View_Game_List));
                changeBGButton(loutGameList, Const.INDEX_ACTION_GAME_LIST);
                break;
            default:
                return;
        }
    }

    private void changeBGButton(LinearLayout loutAction, int tag) {
        switch (loutFlag) {
            case Const.INDEX_ACTION_NEWS:
                loutNews.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
                break;
            case Const.INDEX_ACTION_GAME_LIST:
                loutGameList.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
                break;
            case Const.INDEX_ACTION_GIFT_CODE:
                loutGiftcode.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
                break;
            case Const.INDEX_ACTION_PROFILE:
                loutProfile.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
                break;
            case Const.INDEX_ACTION_SPINNING:
                loutSpinning.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
                break;
            default:
                loutGameList.setBackgroundColor(ContextCompat.getColor(this, R.color.transparent));
        }
        loutAction.setBackgroundColor(ContextCompat.getColor(this, R.color.color_Blue_Dark));
        loutFlag = tag;
    }

    private class MyPagerAdapter extends FragmentPagerAdapter {

        public MyPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int pos) {
            switch (pos) {

                case Const.INDEX_ACTION_NEWS:
                    return new FMNews();
                case Const.INDEX_ACTION_GAME_LIST:
                    return new FMGameList();
                case Const.INDEX_ACTION_GIFT_CODE:
                    return new FMGiftcode();
                case Const.INDEX_ACTION_PROFILE:
                    return new FMProfile();
                case Const.INDEX_ACTION_SPINNING:
                    return new FMSpinning();
                default:
                    return new FMGameList();
            }
        }

        @Override
        public int getCount() {
            return Const.COUNT_VIEW;
        }
    }

    // Xử lý avatar
    /*private void initSelectImage() {
        DlMedia dlMedia = new DlMedia(this);
        dlMedia.setOnClickDialogPhoto(new DlMedia.IActionDialogPhoto() {
            @Override
            public void onClickGetPictureLibrary() {
                galleryIntent();
            }

            @Override
            public void onClickGetCamera() {
                cameraIntent();
            }
        });
        dlMedia.show();
    }

    private void cameraIntent() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, REQUEST_CAMERA);
    }

    private void galleryIntent() {
        Intent intent = new Intent();
        intent.setType("image*//*");
        intent.setAction(Intent.ACTION_GET_CONTENT);//
        startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_FILE);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == SELECT_FILE)
                onSelectFromGalleryResult(data);
            else if (requestCode == REQUEST_CAMERA)
                onCaptureImageResult(data);
        }
    }

    @SuppressWarnings("deprecation")
    private void onSelectFromGalleryResult(Intent data) {
        Bitmap bm = null;
        if (data != null) {
            try {
                bm = MediaStore.Images.Media.getBitmap(getApplicationContext().getContentResolver(), data.getData());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        //imgAvatar.setImageBitmap(bm);
        Uri uriImage = bitmapToUriConverter(bm);
        Glide.with(this).load(uriImage).asBitmap().centerCrop().into(new BitmapImageViewTarget(imgAvatar) {
            @Override
            protected void setResource(Bitmap resource) {
                RoundedBitmapDrawable circularBitmapDrawable =
                        RoundedBitmapDrawableFactory.create(MainActivity.this.getResources(), resource);
                circularBitmapDrawable.setCircular(true);
                imgAvatar.setImageDrawable(circularBitmapDrawable);
            }
        });
    }

    public Uri bitmapToUriConverter(Bitmap mBitmap) {
        Uri uri = null;
        try {
            final BitmapFactory.Options options = new BitmapFactory.Options();
            // Calculate inSampleSize
            ///options.inSampleSize = calculateInSampleSize(options, 100, 100);

            // Decode bitmap with inSampleSize set
            options.inJustDecodeBounds = false;
            Bitmap newBitmap = Bitmap.createScaledBitmap(mBitmap, 200, 200,
                    true);
            File file = new File(this.getFilesDir(), "Image"
                    + new Random().nextInt() + ".jpeg");
            FileOutputStream out = this.openFileOutput(file.getName(),
                    Context.MODE_WORLD_READABLE);
            newBitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
            out.flush();
            out.close();
            //get absolute path
            String realPath = file.getAbsolutePath();
            File f = new File(realPath);
            uri = Uri.fromFile(f);

        } catch (Exception e) {
            Log.e("Your Error Message", e.getMessage());
        }
        return uri;
    }

    private void onCaptureImageResult(Intent data) {
        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        thumbnail.compress(Bitmap.CompressFormat.JPEG, 90, bytes);
        File destination = new File(Environment.getExternalStorageDirectory(),
                System.currentTimeMillis() + ".jpg");
        FileOutputStream fo;
        try {
            destination.createNewFile();
            fo = new FileOutputStream(destination);
            fo.write(bytes.toByteArray());
            fo.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
//        imgAvatar.setImageBitmap(thumbnail);
        Uri uriImage = bitmapToUriConverter(thumbnail);
        Glide.with(this).load(uriImage).asBitmap().centerCrop().into(new BitmapImageViewTarget(imgAvatar) {
            @Override
            protected void setResource(Bitmap resource) {
                RoundedBitmapDrawable circularBitmapDrawable =
                        RoundedBitmapDrawableFactory.create(MainActivity.this.getResources(), resource);
                circularBitmapDrawable.setCircular(true);
                imgAvatar.setImageDrawable(circularBitmapDrawable);
            }
        });
    }*/

}
