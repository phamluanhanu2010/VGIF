package com.strategy.intecom.vtc.vgift.view;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListView;

import com.strategy.intecom.vtc.vgift.R;
import com.strategy.intecom.vtc.vgift.adapter.AdtNoti;
import com.strategy.intecom.vtc.vgift.common.AppBase;
import com.strategy.intecom.vtc.vgift.common.VtcString;
import com.strategy.intecom.vtc.vgift.connection.VtcConnection;
import com.strategy.intecom.vtc.vgift.connection.VtcHttpConnection;
import com.strategy.intecom.vtc.vgift.enums.TypeActionConnection;
import com.strategy.intecom.vtc.vgift.interfaces.Callback;
import com.strategy.intecom.vtc.vgift.interfaces.RequestListener;
import com.strategy.intecom.vtc.vgift.model.NotiItem;
import com.strategy.intecom.vtc.vgift.utils.Const;
import com.strategy.intecom.vtc.vgift.utils.ConstParam;

import org.json.JSONArray;
import org.json.JSONException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Created by ThuyChi on 9/16/2016.
 */
public class FMNotification extends Fragment implements View.OnClickListener, RequestListener {
    private View viewRoot;
    private Callback callback;
    private ListView listViewEmail;
    private AdtNoti mAdapter;
    private VtcConnection vtcConnection;

    public FMNotification() {

    }

    @SuppressLint("ValidFragment")
    public FMNotification(Callback callback) {
        this.callback = callback;
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        viewRoot = inflater.inflate(R.layout.ui_notification, container, false);
        return viewRoot;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        listViewEmail = (ListView) view.findViewById(R.id.lst_Email);

        ImageView imgBack = (ImageView) view.findViewById(R.id.img_Back);
        imgBack.setOnClickListener(this);

        vtcConnection = new VtcConnection(getContext(), this);
        Map<String, String> mapInfoGame = new HashMap<>();
        mapInfoGame.put(ConstParam.PARAM_REQUEST_ACCESS_TOKEN, VtcString.ACCESS_TOKEN);
        mapInfoGame.put(ConstParam.PARAM_REQUEST_USERNAME, VtcString.USER_NAME);
        mapInfoGame.put(ConstParam.PARAM_REQUEST_ACCOUNT_ID, VtcString.ACCOUNT_ID);

        vtcConnection.onExcuteProcess(TypeActionConnection.TYPE_ACTION_GET_LIST_NOTI, RequestListener.API_CONNECTION_GET_LIST_NOTI + VtcHttpConnection.urlEncodeUTF8(mapInfoGame), false, "");

//        initController(view);
    }

    private void initController(String data) {


//        initData();
    }

    private void initData(String data) {
        try {
            JSONArray jsonArrayData = new JSONArray(data);
            AppBase.preferenceUtil(getContext()).setValueInt(VtcString.KEY_NOTIFICATION, jsonArrayData.length());
            if (jsonArrayData.length() > 0) {
                final List<NotiItem> lst = new ArrayList<>();
                int count = 0;
                for (int i = 0; i < jsonArrayData.length(); i++) {
                    NotiItem item = new NotiItem();

                    item.setNotiID(jsonArrayData.optJSONObject(i).optString(ConstParam.NOTIFICATION_ID));
                    item.setNotiTitle(jsonArrayData.optJSONObject(i).optString(ConstParam.TITILE));
                    item.setNotiType(jsonArrayData.optJSONObject(i).optInt(ConstParam.TYPE));
                    item.setLink(jsonArrayData.optJSONObject(i).optString(ConstParam.LINK));
                    item.setPictureUrl(jsonArrayData.optJSONObject(i).optString(ConstParam.PICTURE_NOTI_URL));
                    item.setCreateTime(jsonArrayData.optJSONObject(i).optLong(ConstParam.CREATE_DATE));
                    item.setOpen(jsonArrayData.optJSONObject(i).optBoolean(ConstParam.IS_OPEN));
                    if (!jsonArrayData.optJSONObject(i).optBoolean(ConstParam.IS_OPEN)) {
                        count++;
                    }
                    lst.add(item);
                }
                AppBase.preferenceUtil(getContext()).setValueInt(VtcString.KEY_NOTIFICATION, count);

                mAdapter = new AdtNoti(getContext(), R.layout.tmp_item_noti, lst);
                mAdapter.setOnClickItem(new AdtNoti.onClickItem() {
                    @Override
                    public void onClickItem(String notiID, NotiItem item) {

                        if (!item.isOpen()) {
                            AppBase.preferenceUtil(getContext()).setValueInt(VtcString.KEY_NOTIFICATION, AppBase.preferenceUtil(getContext()).getValueInt(VtcString.KEY_NOTIFICATION) - 1);
//                            callback.onHandlerCallBack(0);
                        }

                        AppBase.showLog("---------------Click NotiID: " + notiID);
                        if (item.getNotiType() == 1) {
                            Bundle bundle = new Bundle();
                            bundle.putString(ConstParam.BUNDLE_KEY_WEBVIEW_LINK, item.getLink());
                            bundle.putString(ConstParam.BUNDLE_KEY_WEBVIEW_TITILE, getResources().getString(R.string.title_View_NOTIFICATION));
                            AppBase.callNewFragment(Const.UI_GUIDE, bundle, true);
                        }

                        initReadNoti(notiID);
                    }

                    @Override
                    public void onDeleteItem(String notiID) {
                        AppBase.showLog("---------------Delete NotiID: " + notiID);

                        AppBase.preferenceUtil(getContext()).setValueInt(VtcString.KEY_NOTIFICATION, AppBase.preferenceUtil(getContext()).getValueInt(VtcString.KEY_NOTIFICATION) - 1);

                        initDeteleNoti(notiID);
                    }
                });
                listViewEmail.setAdapter(mAdapter);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void initReadNoti(String notiID) {
        HashMap<String, String> mapData = new HashMap<>();

        mapData.put(ConstParam.PARAM_REQUEST_ACCESS_TOKEN, VtcString.ACCESS_TOKEN);
        mapData.put(ConstParam.PARAM_REQUEST_USERNAME, VtcString.USER_NAME);
        mapData.put(ConstParam.PARAM_REQUEST_ACCOUNT_ID, VtcString.ACCOUNT_ID);
        mapData.put(ConstParam.PARAM_REQUEST_NOTIFICATION, notiID);
        vtcConnection.onExcuteProcess(TypeActionConnection.TYPE_ACTION_READ_NOTI, RequestListener.API_CONNECTION_READ_NOTI + VtcHttpConnection.urlEncodeUTF8(mapData), true);

    }

    private void initDeteleNoti(String notiID) {
        HashMap<String, String> mapData = new HashMap<>();
        mapData.put(ConstParam.PARAM_REQUEST_ACCESS_TOKEN, VtcString.ACCESS_TOKEN);
        mapData.put(ConstParam.PARAM_REQUEST_USERNAME, VtcString.USER_NAME);
        mapData.put(ConstParam.PARAM_REQUEST_ACCOUNT_ID, VtcString.ACCOUNT_ID);
        mapData.put(ConstParam.PARAM_REQUEST_NOTIFICATION, notiID);
        vtcConnection.onExcuteProcess(TypeActionConnection.TYPE_ACTION_DELETE_NOTI, RequestListener.API_CONNECTION_DELETE_NOTI + VtcHttpConnection.urlEncodeUTF8(mapData), true);

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.img_Back:
                AppBase.initBack();
                callback.onHandlerCallBack(0);
                break;
            default:
                break;
        }
    }

    @Override
    public void onPostExecuteError(TypeActionConnection keyType, String errorcode, String msg, String info, String reponseFullData) {

    }

    @Override
    public void onPostExecuteSuccess(TypeActionConnection keyType, String response, String reponseFullData) {
        switch (keyType) {
            case TYPE_ACTION_GET_LIST_NOTI:
                AppBase.showLog("onPostExecuteSuccess---TYPE_ACTION_GET_LIST_NOTI: " + response);
                initData(response);
                break;
            case TYPE_ACTION_READ_NOTI:
                AppBase.showLog("onPostExecuteSuccess---TYPE_ACTION_READ_NOTI: " + response);
                break;
            case TYPE_ACTION_DELETE_NOTI:
                AppBase.showLog("onPostExecuteSuccess---TYPE_ACTION_DELETE_NOTI: " + response);
                break;
        }
    }
}
